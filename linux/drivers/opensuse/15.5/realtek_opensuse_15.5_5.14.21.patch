diff -ru /usr/src/linux-rt/drivers/net/ethernet/realtek/Makefile 5.14.21/realtek/Makefile
--- /usr/src/linux-rt/drivers/net/ethernet/realtek/Makefile	2024-11-06 14:07:03.000000000 +0100
+++ 5.14.21/realtek/Makefile	2024-11-25 10:06:09.650350735 +0100
@@ -6,5 +6,8 @@
 obj-$(CONFIG_8139CP) += 8139cp.o
 obj-$(CONFIG_8139TOO) += 8139too.o
 obj-$(CONFIG_ATP) += atp.o
-r8169-objs += r8169_main.o r8169_firmware.o r8169_phy_config.o
-obj-$(CONFIG_R8169) += r8169.o
+r8169-libethercat-objs += r8169_main.o r8169_firmware.o r8169_phy_config.o
+obj-$(CONFIG_R8169) += r8169-libethercat.o
+
+EXTRA_CFLAGS=-I$(src)/../../../../../
+KBUILD_EXTRA_SYMBOLS=$(src)/../../../../../Module.symvers
diff -ru /usr/src/linux-rt/drivers/net/ethernet/realtek/r8169.h 5.14.21/realtek/r8169.h
--- /usr/src/linux-rt/drivers/net/ethernet/realtek/r8169.h	2024-11-06 14:07:03.000000000 +0100
+++ 5.14.21/realtek/r8169.h	2024-11-25 10:06:09.653350734 +0100
@@ -11,6 +11,8 @@
 #include <linux/types.h>
 #include <linux/phy.h>
 
+#include "ethercat_device.h"
+
 enum mac_version {
 	/* support for ancient RTL_GIGA_MAC_VER_01 has been removed */
 	RTL_GIGA_MAC_VER_02,
diff -ru /usr/src/linux-rt/drivers/net/ethernet/realtek/r8169_main.c 5.14.21/realtek/r8169_main.c
--- /usr/src/linux-rt/drivers/net/ethernet/realtek/r8169_main.c	2024-11-06 14:07:03.000000000 +0100
+++ 5.14.21/realtek/r8169_main.c	2024-11-25 10:27:14.661967250 +0100
@@ -34,6 +34,8 @@
 #include "r8169.h"
 #include "r8169_firmware.h"
 
+#include "ethercat_device_ioctl.h"
+
 #define FIRMWARE_8168D_1	"rtl_nic/rtl8168d-1.fw"
 #define FIRMWARE_8168D_2	"rtl_nic/rtl8168d-2.fw"
 #define FIRMWARE_8168E_1	"rtl_nic/rtl8168e-1.fw"
@@ -575,33 +577,6 @@
 	__le32	rx_multicast;
 	__le16	tx_aborted;
 	__le16	tx_underun;
-	/* new since RTL8125 */
-	__le64 tx_octets;
-	__le64 rx_octets;
-	__le64 rx_multicast64;
-	__le64 tx_unicast64;
-	__le64 tx_broadcast64;
-	__le64 tx_multicast64;
-	__le32 tx_pause_on;
-	__le32 tx_pause_off;
-	__le32 tx_pause_all;
-	__le32 tx_deferred;
-	__le32 tx_late_collision;
-	__le32 tx_all_collision;
-	__le32 tx_aborted32;
-	__le32 align_errors32;
-	__le32 rx_frame_too_long;
-	__le32 rx_runt;
-	__le32 rx_pause_on;
-	__le32 rx_pause_off;
-	__le32 rx_pause_all;
-	__le32 rx_unknown_opcode;
-	__le32 rx_mac_error;
-	__le32 tx_underrun32;
-	__le32 rx_mac_missed;
-	__le32 rx_tcam_dropped;
-	__le32 tdu;
-	__le32 rdu;
 };
 
 struct rtl8169_tc_offsets {
@@ -644,6 +619,7 @@
 	u16 cp_cmd;
 	u32 irq_mask;
 	struct clk *clk;
+	spinlock_t lock;        /* spin lock flag */
 
 	struct {
 		DECLARE_BITMAP(flags, RTL_FLAG_MAX);
@@ -662,8 +638,21 @@
 	struct rtl_fw *rtl_fw;
 
 	u32 ocp_base;
+	
+	bool is_ecat;
+	struct ethercat_device *ecat_dev;
 };
 
+#define ETHERCAT_MAC_ADDR_SIZE 10
+static char * ethercat_mac_addr[ETHERCAT_MAC_ADDR_SIZE];
+static int ethercat_mac_addr_count;
+module_param_array(ethercat_mac_addr, charp, &ethercat_mac_addr_count,  0660);
+MODULE_PARM_DESC(ethercat_mac_addr, "List of MAC addresses to use as EtherCAT device");
+
+static unsigned int ethercat_polling;
+module_param(ethercat_polling, uint, 0);
+MODULE_PARM_DESC(ethercat_polling, "Set interface to polling mode (no interrupt) for EtherCAT case");
+
 typedef void (*rtl_generic_fct)(struct rtl8169_private *tp);
 
 MODULE_AUTHOR("Realtek and the Linux r8169 crew <netdev@vger.kernel.org>");
@@ -3963,7 +3952,7 @@
 			struct sk_buff *skb = tx_skb->skb;
 
 			rtl8169_unmap_tx_skb(tp, entry);
-			if (skb)
+			if (unlikely(!tp->ecat_dev) && skb)
 				dev_consume_skb_any(skb);
 		}
 	}
@@ -3972,12 +3961,15 @@
 static void rtl8169_tx_clear(struct rtl8169_private *tp)
 {
 	rtl8169_tx_clear_range(tp, tp->dirty_tx, NUM_TX_DESC);
-	netdev_reset_queue(tp->dev);
+	if (unlikely(!tp->ecat_dev))
+		netdev_reset_queue(tp->dev);
 }
 
 static void rtl8169_cleanup(struct rtl8169_private *tp, bool going_down)
 {
-	napi_disable(&tp->napi);
+	if (unlikely(!tp->ecat_dev)) {
+		napi_disable(&tp->napi);
+	}
 
 	/* Give a racing hard_start_xmit a few cycles to complete. */
 	synchronize_net();
@@ -4020,14 +4012,18 @@
 {
 	int i;
 
-	netif_stop_queue(tp->dev);
+	if (unlikely(!tp->ecat_dev)) {
+		netif_stop_queue(tp->dev);
+	}
 
 	rtl8169_cleanup(tp, false);
 
 	for (i = 0; i < NUM_RX_DESC; i++)
 		rtl8169_mark_to_asic(tp->RxDescArray + i);
 
-	napi_enable(&tp->napi);
+	if (unlikely(!tp->ecat_dev)) {
+		napi_enable(&tp->napi);
+	}
 	rtl_hw_start(tp);
 }
 
@@ -4035,7 +4031,9 @@
 {
 	struct rtl8169_private *tp = netdev_priv(dev);
 
-	rtl_schedule_task(tp, RTL_FLAG_TASK_RESET_PENDING);
+	if (unlikely(!tp->ecat_dev)) {
+		rtl_schedule_task(tp, RTL_FLAG_TASK_RESET_PENDING);
+	}
 }
 
 static int rtl8169_tx_map(struct rtl8169_private *tp, const u32 *opts, u32 len,
@@ -4278,6 +4276,10 @@
 	bool stop_queue, door_bell;
 	unsigned int frags;
 	u32 opts[2];
+	unsigned long flags;
+
+	if (tp->ecat_dev && !ethercat_polling)
+        	spin_lock_irqsave(&tp->lock, flags);
 
 	if (unlikely(!rtl_tx_slots_avail(tp))) {
 		if (net_ratelimit())
@@ -4315,14 +4317,21 @@
 	/* Force memory writes to complete before releasing descriptor */
 	dma_wmb();
 
-	door_bell = __netdev_sent_queue(dev, skb->len, netdev_xmit_more());
+	if (likely(tp->ecat_dev))
+		door_bell = true;
+	else
+		door_bell = __netdev_sent_queue(dev, skb->len, netdev_xmit_more());
 
 	txd_first->opts1 |= cpu_to_le32(DescOwn | FirstFrag);
 
 	/* rtl_tx needs to see descriptor changes before updated tp->cur_tx */
 	smp_wmb();
 
-	WRITE_ONCE(tp->cur_tx, tp->cur_tx + frags + 1);
+	if (tp->ecat_dev) {
+		WRITE_ONCE(tp->cur_tx, ((entry + 1) % NUM_TX_DESC));
+		smp_mb__after_atomic();
+	} else
+		WRITE_ONCE(tp->cur_tx, tp->cur_tx + frags + 1);
 
 	stop_queue = !rtl_tx_slots_avail(tp);
 	if (unlikely(stop_queue)) {
@@ -4330,7 +4339,9 @@
 		 * not miss a ring update when it notices a stopped queue.
 		 */
 		smp_wmb();
-		netif_stop_queue(dev);
+		if (unlikely(!tp->ecat_dev)) {
+			netif_stop_queue(dev);
+		}
 		/* Sync with rtl_tx:
 		 * - publish queue status and cur_tx ring index (write barrier)
 		 * - refresh dirty_tx ring index (read barrier).
@@ -4339,7 +4350,7 @@
 		 * can't.
 		 */
 		smp_mb__after_atomic();
-		if (rtl_tx_slots_avail(tp))
+		if (unlikely(!tp->ecat_dev) && rtl_tx_slots_avail(tp))
 			netif_start_queue(dev);
 		door_bell = true;
 	}
@@ -4347,18 +4358,27 @@
 	if (door_bell)
 		rtl8169_doorbell(tp);
 
+	if (tp->ecat_dev && !ethercat_polling)
+        	spin_unlock_irqrestore(&tp->lock, flags);
+
 	return NETDEV_TX_OK;
 
 err_dma_1:
 	rtl8169_unmap_tx_skb(tp, entry);
 err_dma_0:
-	dev_kfree_skb_any(skb);
+	if (unlikely(!tp->ecat_dev)) 
+		dev_kfree_skb_any(skb);
 	dev->stats.tx_dropped++;
+	if (tp->ecat_dev && !ethercat_polling)
+        	spin_unlock_irqrestore(&tp->lock, flags);
 	return NETDEV_TX_OK;
 
 err_stop_0:
-	netif_stop_queue(dev);
+	if (unlikely(!tp->ecat_dev))
+		netif_stop_queue(dev);
 	dev->stats.tx_dropped++;
+	if (tp->ecat_dev && !ethercat_polling)
+        	spin_unlock_irqrestore(&tp->lock, flags);
 	return NETDEV_TX_BUSY;
 }
 
@@ -4446,6 +4466,33 @@
 	unsigned int dirty_tx, bytes_compl = 0, pkts_compl = 0;
 	struct sk_buff *skb;
 
+	if (tp->ecat_dev) {
+		u32 status;
+
+		while (tp->cur_tx != tp->dirty_tx) {
+			unsigned int entry = tp->dirty_tx % NUM_TX_DESC;
+			smp_store_mb(tp->dirty_tx, (entry + 1) % NUM_TX_DESC);
+
+			status = le32_to_cpu(tp->TxDescArray[entry].opts1);
+			if (status & DescOwn)
+				break;
+
+			skb = tp->tx_skb[entry].skb;
+			rtl8169_unmap_tx_skb(tp, entry);
+
+			if (skb) {
+				pkts_compl++;
+				bytes_compl += skb->len;
+			}
+		}
+		
+		if (tp->cur_tx != dirty_tx) {
+			rtl8169_doorbell(tp);
+		}
+		
+		return; 
+	}
+
 	dirty_tx = tp->dirty_tx;
 
 	while (READ_ONCE(tp->cur_tx) != dirty_tx) {
@@ -4462,13 +4509,20 @@
 		if (skb) {
 			pkts_compl++;
 			bytes_compl += skb->len;
-			napi_consume_skb(skb, budget);
+			if (!tp->ecat_dev) {
+				napi_consume_skb(skb, budget);
+			}
 		}
 		dirty_tx++;
+		if (tp->ecat_dev)
+			dirty_tx = dirty_tx % NUM_TX_DESC;
 	}
 
 	if (tp->dirty_tx != dirty_tx) {
-		netdev_completed_queue(dev, pkts_compl, bytes_compl);
+		if (unlikely(!tp->ecat_dev)) {
+			netdev_completed_queue(dev, pkts_compl, bytes_compl);
+		}
+
 		dev_sw_netstats_tx_add(dev, pkts_compl, bytes_compl);
 
 		/* Sync with rtl8169_start_xmit:
@@ -4479,8 +4533,11 @@
 		 * ring status.
 		 */
 		smp_store_mb(tp->dirty_tx, dirty_tx);
-		if (netif_queue_stopped(dev) && rtl_tx_slots_avail(tp))
-			netif_wake_queue(dev);
+		if (unlikely(!tp->ecat_dev)) {
+			if (netif_queue_stopped(dev) && rtl_tx_slots_avail(tp))
+				netif_wake_queue(dev);
+		}
+
 		/*
 		 * 8168 hack: TxPoll requests are lost when the Tx packets are
 		 * too close. Let's kick an extra TxPoll request when a burst
@@ -4521,6 +4578,9 @@
 		const void *rx_buf;
 		dma_addr_t addr;
 		u32 status;
+		
+		if (tp->ecat_dev)
+			tp->cur_rx = tp->cur_rx % NUM_RX_DESC;
 
 		status = le32_to_cpu(desc->opts1);
 		if (status & DescOwn)
@@ -4561,10 +4621,13 @@
 			goto release_descriptor;
 		}
 
-		skb = napi_alloc_skb(&tp->napi, pkt_size);
-		if (unlikely(!skb)) {
-			dev->stats.rx_dropped++;
-			goto release_descriptor;
+		if (!tp->ecat_dev) {
+			skb = napi_alloc_skb(&tp->napi, pkt_size);
+
+			if (unlikely(!skb)) {
+				dev->stats.rx_dropped++;
+				goto release_descriptor;
+			}
 		}
 
 		addr = le64_to_cpu(desc->addr);
@@ -4572,6 +4635,12 @@
 
 		dma_sync_single_for_cpu(d, addr, pkt_size, DMA_FROM_DEVICE);
 		prefetch(rx_buf);
+		if (likely(tp->ecat_dev)) {
+			ethercat_device_receive(tp->ecat_dev, rx_buf, pkt_size);
+			dma_sync_single_for_device(d, addr, pkt_size, DMA_FROM_DEVICE);
+			goto release_descriptor;
+		}
+
 		skb_copy_to_linear_data(skb, rx_buf, pkt_size);
 		skb->tail += pkt_size;
 		skb->len = pkt_size;
@@ -4595,15 +4664,19 @@
 	return count;
 }
 
+static int rtl8169_poll(struct napi_struct *napi, int budget);
+
 static irqreturn_t rtl8169_interrupt(int irq, void *dev_instance)
 {
 	struct rtl8169_private *tp = dev_instance;
 	u32 status = rtl_get_events(tp);
 
-	if ((status & 0xffff) == 0xffff || !(status & tp->irq_mask))
-		return IRQ_NONE;
+	if (!tp->ecat_dev) {
+		if ((status & 0xffff) == 0xffff || !(status & tp->irq_mask))
+			return IRQ_NONE;
+	}
 
-	if (unlikely(status & SYSErr)) {
+	if (unlikely(!tp->ecat_dev) && unlikely(status & SYSErr)) {
 		rtl8169_pcierr_interrupt(tp->dev);
 		goto out;
 	}
@@ -4611,16 +4684,22 @@
 	if (status & LinkChg)
 		phy_mac_interrupt(tp->phydev);
 
-	if (unlikely(status & RxFIFOOver &&
-	    tp->mac_version == RTL_GIGA_MAC_VER_11)) {
-		netif_stop_queue(tp->dev);
-		rtl_schedule_task(tp, RTL_FLAG_TASK_RESET_PENDING);
-	}
+	if (unlikely(!tp->ecat_dev)) {
+		if (unlikely(status & RxFIFOOver &&
+					tp->mac_version == RTL_GIGA_MAC_VER_11)) {
+			netif_stop_queue(tp->dev);
+			rtl_schedule_task(tp, RTL_FLAG_TASK_RESET_PENDING);
+		}
 
-	if (napi_schedule_prep(&tp->napi)) {
+		if (napi_schedule_prep(&tp->napi)) {
+			rtl_irq_disable(tp);
+			__napi_schedule(&tp->napi);
+		}
+	} else {
 		rtl_irq_disable(tp);
-		__napi_schedule(&tp->napi);
-	}
+		rtl8169_poll(&tp->napi, 64);
+	} 
+
 out:
 	rtl_ack_events(tp, status);
 
@@ -4634,29 +4713,37 @@
 
 	rtnl_lock();
 
-	if (!netif_running(tp->dev) ||
+	if ((unlikely(!tp->ecat_dev) && !netif_running(tp->dev)) ||
 	    !test_bit(RTL_FLAG_TASK_ENABLED, tp->wk.flags))
 		goto out_unlock;
 
 	if (test_and_clear_bit(RTL_FLAG_TASK_RESET_PENDING, tp->wk.flags)) {
 		rtl_reset_work(tp);
-		netif_wake_queue(tp->dev);
+		if (unlikely(!tp->ecat_dev))
+			netif_wake_queue(tp->dev);
 	}
 out_unlock:
 	rtnl_unlock();
 }
 
-static int rtl8169_poll(struct napi_struct *napi, int budget)
+int rtl8169_poll(struct napi_struct *napi, int budget)
 {
 	struct rtl8169_private *tp = container_of(napi, struct rtl8169_private, napi);
 	struct net_device *dev = tp->dev;
 	int work_done;
+	unsigned long flags;
 
-	rtl_tx(dev, tp, budget);
+	if (likely(tp->ecat_dev)) {
+		spin_lock_irqsave(&tp->lock, flags);
+		rtl_tx(dev, tp, budget);
+		spin_unlock_irqrestore(&tp->lock, flags);
+	} else {
+		rtl_tx(dev, tp, budget);
+	}
 
 	work_done = rtl_rx(dev, tp, budget);
 
-	if (work_done < budget && napi_complete_done(napi, work_done))
+	if (likely(tp->ecat_dev) || (work_done < budget && napi_complete_done(napi, work_done)))
 		rtl_irq_enable(tp);
 
 	return work_done;
@@ -4666,7 +4753,7 @@
 {
 	struct rtl8169_private *tp = netdev_priv(ndev);
 
-	if (netif_carrier_ok(ndev)) {
+	if (likely(tp->ecat_dev) || netif_carrier_ok(ndev)) {
 		rtl_link_chg_patch(tp);
 		pm_request_resume(&tp->pci_dev->dev);
 	} else {
@@ -4691,7 +4778,7 @@
 	if (ret)
 		return ret;
 
-	if (!tp->supports_gmii)
+	if (!tp->supports_gmii || tp->ecat_dev)
 		phy_set_max_speed(phydev, SPEED_100);
 
 	phy_attached_info(phydev);
@@ -4722,7 +4809,9 @@
 	phy_init_hw(tp->phydev);
 	phy_resume(tp->phydev);
 	rtl8169_init_phy(tp);
-	napi_enable(&tp->napi);
+	if (!tp->ecat_dev) {
+		napi_enable(&tp->napi);
+	}
 	set_bit(RTL_FLAG_TASK_ENABLED, tp->wk.flags);
 	rtl_reset_work(tp);
 
@@ -4736,7 +4825,9 @@
 
 	pm_runtime_get_sync(&pdev->dev);
 
-	netif_stop_queue(dev);
+	if (!tp->ecat_dev) {
+		netif_stop_queue(dev);
+	}
 	rtl8169_down(tp);
 	rtl8169_rx_clear(tp);
 
@@ -4776,6 +4867,10 @@
 
 	pm_runtime_get_sync(&pdev->dev);
 
+	if (tp->ecat_dev) {
+		ethercat_device_set_link(tp->ecat_dev, 0);
+	}
+
 	/*
 	 * Rx and Tx descriptors needs 256 bytes alignment.
 	 * dma_alloc_coherent provides more.
@@ -4796,11 +4891,13 @@
 
 	rtl_request_firmware(tp);
 
-	irqflags = pci_dev_msi_enabled(pdev) ? IRQF_NO_THREAD : IRQF_SHARED;
-	retval = request_irq(pci_irq_vector(pdev, 0), rtl8169_interrupt,
-			     irqflags, dev->name, tp);
-	if (retval < 0)
-		goto err_release_fw_2;
+	if (!tp->is_ecat || !ethercat_polling) {
+		irqflags = IRQF_SHARED;
+		retval = request_irq(pci_irq_vector(pdev, 0), rtl8169_interrupt,
+				irqflags, dev->name, tp);
+		if (retval < 0)
+			goto err_release_fw_2;
+	}
 
 	retval = r8169_phy_connect(tp);
 	if (retval)
@@ -4808,7 +4905,10 @@
 
 	rtl8169_up(tp);
 	rtl8169_init_counter_offsets(tp);
-	netif_start_queue(dev);
+
+	if (!tp->ecat_dev) {
+		netif_start_queue(dev);
+	}
 out:
 	pm_runtime_put_sync(&pdev->dev);
 
@@ -4867,10 +4967,14 @@
 
 static void rtl8169_net_suspend(struct rtl8169_private *tp)
 {
-	netif_device_detach(tp->dev);
-
-	if (netif_running(tp->dev))
+	if (tp->ecat_dev) {
 		rtl8169_down(tp);
+	} else {
+		netif_device_detach(tp->dev);
+
+		if (netif_running(tp->dev))
+			rtl8169_down(tp);
+	}
 }
 
 #ifdef CONFIG_PM
@@ -4879,6 +4983,10 @@
 {
 	struct rtl8169_private *tp = dev_get_drvdata(dev);
 
+	if (tp->ecat_dev) { 
+		return -EBUSY;
+	}
+
 	rtl_rar_set(tp, tp->dev->dev_addr);
 	__rtl8169_set_wol(tp, tp->saved_wolopts);
 
@@ -4893,6 +5001,10 @@
 static int __maybe_unused rtl8169_suspend(struct device *device)
 {
 	struct rtl8169_private *tp = dev_get_drvdata(device);
+	
+	if (tp->ecat_dev) { 
+		return -EBUSY;
+	}
 
 	rtnl_lock();
 	rtl8169_net_suspend(tp);
@@ -4906,6 +5018,10 @@
 static int __maybe_unused rtl8169_resume(struct device *device)
 {
 	struct rtl8169_private *tp = dev_get_drvdata(device);
+	
+	if (tp->ecat_dev) { 
+		return -EBUSY;
+	}
 
 	if (!device_may_wakeup(tp_to_dev(tp)))
 		clk_prepare_enable(tp->clk);
@@ -4920,6 +5036,10 @@
 static int rtl8169_runtime_suspend(struct device *device)
 {
 	struct rtl8169_private *tp = dev_get_drvdata(device);
+	
+	if (tp->ecat_dev) { 
+		return -EBUSY;
+	}
 
 	if (!tp->TxDescArray) {
 		netif_device_detach(tp->dev);
@@ -4937,8 +5057,12 @@
 static int rtl8169_runtime_idle(struct device *device)
 {
 	struct rtl8169_private *tp = dev_get_drvdata(device);
+	
+	if (tp->ecat_dev) { 
+		return -EBUSY;
+	}
 
-	if (!netif_running(tp->dev) || !netif_carrier_ok(tp->dev))
+	if (netif_running(tp->dev) || !netif_carrier_ok(tp->dev))
 		pm_schedule_suspend(device, 10000);
 
 	return -EBUSY;
@@ -4992,11 +5116,17 @@
 static void rtl_remove_one(struct pci_dev *pdev)
 {
 	struct rtl8169_private *tp = pci_get_drvdata(pdev);
+	
+	if (tp->ecat_dev) {
+		ethercat_device_destroy(tp->ecat_dev);
+	}
 
 	if (pci_dev_run_wake(pdev))
 		pm_runtime_get_noresume(&pdev->dev);
 
-	unregister_netdev(tp->dev);
+	if (!tp->ecat_dev) {
+		unregister_netdev(tp->dev);
+	}
 
 	if (tp->dash_type != RTL_DASH_NONE)
 		rtl8168_driver_stop(tp);
@@ -5007,6 +5137,80 @@
 	rtl_rar_set(tp, tp->dev->perm_addr);
 }
 
+static int rtl_do_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd) 
+{
+	switch (cmd) {
+		case ETHERCAT_DEVICE_NET_DEVICE_DO_POLL: {
+			struct rtl8169_private *tp = netdev_priv(netdev);
+			struct net_device *dev = tp->dev;
+			int work_done;
+			int budget = 64;
+
+			if (!tp->is_ecat) {
+				return -EOPNOTSUPP;
+			}
+
+			rtl_tx(dev, tp, budget);
+			work_done = rtl_rx(dev, tp, budget);
+
+			if (work_done >= budget)
+				return 1;
+
+			return 0;
+		}
+		case ETHERCAT_DEVICE_NET_DEVICE_SET_POLLING: {
+			int do_reopen = ethercat_polling != 1;
+			struct rtl8169_private *tp = netdev_priv(netdev);
+			if (!tp->is_ecat) {
+				return -EOPNOTSUPP;
+			}
+
+			if (do_reopen) {
+				rtl8169_close(netdev);
+			}
+
+			ethercat_polling = 1;
+
+			if (do_reopen) {
+				rtl_open(netdev);
+			}
+			return 1;
+		}
+		case ETHERCAT_DEVICE_NET_DEVICE_RESET_POLLING: {
+			int do_reopen = ethercat_polling != 0;
+			struct rtl8169_private *tp = netdev_priv(netdev);
+			if (!tp->is_ecat) {
+				return -EOPNOTSUPP;
+			}
+
+			if (do_reopen) {
+				rtl8169_close(netdev);
+			}
+
+			ethercat_polling = 0;
+
+			if (do_reopen) {
+				rtl_open(netdev);
+			}
+			return 1;
+		}
+		case ETHERCAT_DEVICE_NET_DEVICE_GET_POLLING: {
+			struct rtl8169_private *tp = netdev_priv(netdev);
+			if (!tp->is_ecat) {
+				return -EOPNOTSUPP;
+			}
+
+			if (ethercat_polling == 0) {
+				return 0;
+			} 
+
+			return 1;
+		}
+		default:
+			return phy_do_ioctl_running(netdev, ifr, cmd);
+	}
+}
+
 static const struct net_device_ops rtl_netdev_ops = {
 	.ndo_open		= rtl_open,
 	.ndo_stop		= rtl8169_close,
@@ -5020,6 +5224,7 @@
 	.ndo_set_features	= rtl8169_set_features,
 	.ndo_set_mac_address	= rtl_set_mac_address,
 	.ndo_eth_ioctl		= phy_do_ioctl_running,
+    .ndo_do_ioctl       = rtl_do_ioctl,
 	.ndo_set_rx_mode	= rtl_set_rx_mode,
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= rtl8169_netpoll,
@@ -5285,6 +5490,35 @@
 	rtl_rar_set(tp, mac_addr);
 }
 
+static int parse_macaddr(const char *macstr, char *dev_addr)
+{
+        int i, h, l;
+
+        for (i = 0; i < 6; i++) {
+                h = hex_to_bin(*macstr);
+                if (h == -1)
+                        goto err;
+                macstr++;
+
+                l = hex_to_bin(*macstr);
+                if (l == -1)
+                        goto err;
+                macstr++;
+
+                if (i != 5) {
+                        if (*macstr != ':')
+                                goto err;
+                        macstr++;
+                }
+                dev_addr[i] = (h << 4) + l;
+        }
+        if (is_valid_ether_addr(dev_addr))
+                return 0;
+
+err:
+        return -EINVAL;
+}
+
 static int rtl_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct rtl8169_private *tp;
@@ -5292,6 +5526,7 @@
 	enum mac_version chipset;
 	struct net_device *dev;
 	u16 xid;
+	int cnt = 0;
 
 	dev = devm_alloc_etherdev(&pdev->dev, sizeof (*tp));
 	if (!dev)
@@ -5393,7 +5628,9 @@
 
 	dev->ethtool_ops = &rtl8169_ethtool_ops;
 
-	netif_napi_add(dev, &tp->napi, rtl8169_poll, NAPI_POLL_WEIGHT);
+	if (!tp->ecat_dev) {
+		netif_napi_add(dev, &tp->napi, rtl8169_poll, NAPI_POLL_WEIGHT);
+	}
 
 	dev->hw_features = NETIF_F_IP_CSUM | NETIF_F_RXCSUM |
 			   NETIF_F_HW_VLAN_CTAG_TX | NETIF_F_HW_VLAN_CTAG_RX;
@@ -5456,9 +5693,43 @@
 	if (rc)
 		return rc;
 
-	rc = register_netdev(dev);
-	if (rc)
-		return rc;
+	spin_lock_init(&tp->lock);
+
+	/* check if we should use this one as EtherCAT device 
+	*/ 
+	tp->is_ecat = false;
+	tp->ecat_dev = NULL;
+
+	if (ethercat_mac_addr_count > 0) {
+		for (cnt = 0; cnt < ethercat_mac_addr_count; ++cnt) {
+			char ethercat_dev_addr[6];
+			parse_macaddr(ethercat_mac_addr[cnt], ethercat_dev_addr);
+
+			if (ether_addr_equal(dev->dev_addr, ethercat_dev_addr)) {
+				struct ethtool_coalesce ec;
+
+				dev_info(&pdev->dev, "attaching as EtherCAT interface\n");
+				tp->is_ecat = true;
+				tp->ecat_dev = ethercat_device_create(dev);
+
+				ec.tx_max_coalesced_frames = 1;
+				ec.rx_max_coalesced_frames = 1;
+				ec.tx_coalesce_usecs = 0;
+				ec.rx_coalesce_usecs = 0;
+				rtl_set_coalesce(dev, &ec, NULL, NULL);
+		
+				RTL_W32(tp, RxConfig, RTL_R32(tp, RxConfig) |
+						AcceptBroadcast | AcceptMulticast | AcceptMyPhys | AcceptRunt);
+				break;
+			}
+		}
+	}
+
+	if (!tp->ecat_dev) {
+		rc = register_netdev(dev);
+		if (rc)
+			return rc;
+	}
 
 	netdev_info(dev, "%s, %pM, XID %03x, IRQ %d\n",
 		    rtl_chip_infos[chipset].name, dev->dev_addr, xid,
